232)implement-queue-using-stack

class MyQueue:

    def __init__(self):
        self.s1 = []
        self.s2 = []

    # Push element to the back of the queue
    def push(self, x: int) -> None:
        self.s1.append(x)

    # Removes element from the front of the queue
    def pop(self) -> int:
        if not self.s2:
            while self.s1:
                self.s2.append(self.s1.pop())
        if not self.s2:
            return -1
        return self.s2.pop()

    # Get the front element
    def peek(self) -> int:
        if not self.s2:
            while self.s1:
                self.s2.append(self.s1.pop())
        if not self.s2:
            return -1
        return self.s2[-1]

    # Returns whether the queue is empty
    def empty(self) -> bool:
        return not self.s1 and not self.s2

933)number-of-recent-calls

class RecentCounter:

    def __init__(self):
        self.pings = []

    def ping(self, t: int) -> int:
        self.pings.append(t)
        start, end = 0, len(self.pings) - 1
        while end > start:
            mid = (start+end)//2
            if self.pings[mid] < t - 3000:
                start = mid + 1
            else:
                end = mid
        start = start + 1 if self.pings[start] < t - 3000 else start

        return len(self.pings) - start


# Your RecentCounter object will be instantiated and called as such:
# obj = RecentCounter()
# param_1 = obj.ping(t)

622)design-circular-queue

class MyCircularQueue:

    def __init__(self, k: int):
        self.q=[]
        self.k=k

    def enQueue(self, value: int) -> bool:
        if self.k>0:
            self.q.append(value)
            self.k-=1
            return True
        return False

    def deQueue(self) -> bool:
        if self.q:
            self.q.pop(0)
            self.k+=1
            return True
        return False

    def Front(self) -> int:
        if self.q:
            return self.q[0]
        return -1

    def Rear(self) -> int:
        if self.q:
            return self.q[-1]
        return -1

    def isEmpty(self) -> bool:
        if not self.q:
            return True
        return False

    def isFull(self) -> bool:
        if self.k==0:
            return True
        return False


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
