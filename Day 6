15)3Sum

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        new = []
        n = len(nums)
        for i in range(n):
            if i > 0 and nums[i] == nums[i-1]: 
                continue
            l, r = i + 1, n - 1
            while l < r:
                threesum = nums[i] + nums[l] + nums[r]
                if threesum < 0:
                    l += 1
                elif threesum > 0:
                    r -= 1
                else:
                    new.append([nums[i], nums[l], nums[r]])
                    while l < r and nums[l] == nums[l+1]:
                        l += 1
                    while l < r and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1
                    r -= 1
        return new

128)Longest consequence

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        longest=0
        num_set=set(nums)
        for n in num_set:
            if (n-1) not in num_set:
                length=1
                while (n+length) in num_set:
                    length+=1
                longest=max(longest,length)
        return longest

75)sort-colors

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        low=0
        mid=0
        high=len(nums)-1
        while mid<=high:
            if nums[mid]==0:
                nums[low],nums[mid]=nums[mid],nums[low]
                low+=1
                mid+=1
            elif nums[mid]==1:
                mid+=1
            else:
                nums[mid],nums[high]=nums[high],nums[mid]
                high-=1
