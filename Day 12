367)Valid-perfect-square

class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        i = 0
        n = num
        while i <= n:
            mid = (i + n) // 2
            if mid * mid == num:
                return True
            elif mid * mid > num:
                n = mid - 1
            else:
                i = mid + 1
        return False

278)first-bad-version

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:
class Solution:
    def firstBadVersion(self, n: int) -> int:
        first, last = 1, n
        while first < last:
            mid = first + (last - first) // 2

            if isBadVersion(mid):
                last = mid  
            else:
                first = mid + 1  
        return first  

852)peak-index-in-a-moutain-array

class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        n = len(arr)
        left, right = 0, n - 1

        while left <= right:
            mid = left + (right - left) // 2
            if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:
                return mid
            elif arr[mid] < arr[mid - 1]:
                right = mid - 1
            else:
                left = mid + 1   
            mid =  left + (right - left) // 2   
            if mid == 0 :    
                return  mid +  1    
            elif mid == n - 1 :   
                return  mid -  1
