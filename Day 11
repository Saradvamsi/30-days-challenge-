303)range-sum-quety-immutable

class NumArray:
    def __init__(self, nums: List[int]):
        self.sum = []
        sum_till = 0
        for i in nums:
            sum_till += i
            self.sum.append(sum_till)

    def sumRange(self, i: int, j: int) -> int:
        if i > 0 and j > 0:
            return self.sum[j] - self.sum[i - 1]
        else:
            return self.sum[i or j]

724)find pivot index

class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
        l = len(nums)
        if l == 1:
            return 0

        prefix = [0] * l
        postfix = [0] * l

        prefix[0] = nums[0]
        postfix[-1] = nums[-1]

        for i in range(l-2, -1, -1):
            postfix[i] = postfix[i+1] + nums[i]
        if postfix[1] == 0:
            return 0

        for i in range(1, l):
            prefix[i] = prefix[i-1] + nums[i]

        for i in range(1,l-1):
            if prefix[i-1] == postfix[i+1]:
                return i
                
        if prefix[-2] == 0:
            return l-1
        return -1

1480)running-sum-of-1d-array

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        li=[]
        for i in range(len(nums)):
            li.append(sum(nums[:i+1]))
        return li
